name: Deploy to Hostinger

on:
  push:
    branches: [main]
    paths:
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
      - '**/*.json'
      - '**/*.xml'
      - '**/*.txt'
      - '**/*.php'
      - '**/.htaccess'
      - '.htaccess'
      - 'IMG/**'
      - 'icons/**'
      - 'api/**'
      - 'assets/**'
      - 'sw.js'
      - 'manifest.json'
      - 'sitemap.xml'
      - 'robots.txt'
      - 'version.txt'
      - '.github/workflows/hostinger-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy via SFTP
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: cm-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install lftp
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp

      - name: Generate version file
        run: |
          echo "${{ github.sha }} $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > version.txt
          echo "üìù Generated version.txt: $(cat version.txt)"

      - name: Deploy to Hostinger
        env:
          HOST: ${{ secrets.HOSTINGER_FTP_SERVER }}
          PORT: ${{ secrets.HOSTINGER_FTP_PORT }}
          USER: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          PASS: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          REMOTE_DIR: ${{ secrets.HOSTINGER_REMOTE_DIR }}
        run: |
          set +e
          echo "üöÄ Starting deployment..."
          lftp -u "$USER","$PASS" sftp://"$HOST":"$PORT" -e "
            set net:timeout 30;
            set net:max-retries 3;
            set net:reconnect-interval-base 5;
            set sftp:auto-confirm yes;
            set xfer:clobber on;
            mkdir -p $REMOTE_DIR;
            cd $REMOTE_DIR;
            lcd $GITHUB_WORKSPACE;
            mirror -R \
              --parallel=4 \
              --continue \
              --only-newer \
              --verbose \
              --exclude-glob .git* \
              --exclude-glob .github/ \
              --exclude-glob node_modules/ \
              --exclude-glob '*.map' \
              --exclude-glob '*.md' \
              --exclude-glob deploy.sh \
              --exclude-glob .DS_Store \
              --exclude-glob .deploy-trigger \
              --exclude-glob docs/ \
              --exclude-glob backups/ \
              --exclude-glob logs/;
            bye
          "
          STATUS=$?
          # lftp exit 1 is commonly benign (e.g., trying to remove non-existent file).
          if [ $STATUS -ne 0 ] && [ $STATUS -ne 1 ]; then
            echo "::error::lftp failed with exit code $STATUS"
            exit $STATUS
          fi
          echo "‚úÖ Deployment complete (exit=$STATUS)"

      - name: Verify live site updated
        run: |
          echo "‚è≥ Waiting 5 seconds for propagation..."
          sleep 5

          echo "üîç Verifying version.txt matches this build..."
          URL="https://chicagosmoney.com/version.txt?__=${{ github.run_id }}"
          curl -sS -D /tmp/headers.txt -H 'Cache-Control: no-cache' "$URL" | tee /tmp/live_version.txt

          echo ""
          echo "---- Response headers ----"
          cat /tmp/headers.txt

          test -s /tmp/live_version.txt || { echo "‚ùå version.txt missing"; exit 1; }
          grep -q "${{ github.sha }}" /tmp/live_version.txt || { echo "‚ùå Live version does not match build SHA"; cat /tmp/live_version.txt; exit 1; }

          echo "‚úÖ Live version matches: ${{ github.sha }}"

          echo ""
          echo "üîç Fetching live homepage..."
          curl -sS https://chicagosmoney.com/ | tee /tmp/live.html
          grep -q '<title>Chicago' /tmp/live.html || { echo "‚ùå Homepage not updated"; head -c 500 /tmp/live.html; exit 1; }
          echo "‚úÖ Homepage verified"
