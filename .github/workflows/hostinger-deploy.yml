name: Deploy to Hostinger

on:
  push:
    branches: [main]
    paths:
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
      - '**/*.json'
      - '**/*.xml'
      - '**/*.txt'
      - '**/*.php'
      - 'deploy-info.php'
      - '**/.htaccess'
      - '.htaccess'
      - 'IMG/**'
      - 'icons/**'
      - 'api/**'
      - 'assets/**'
      - 'sw.js'
      - 'manifest.json'
      - 'sitemap.xml'
      - 'robots.txt'
      - 'version.txt'
      - '.github/workflows/hostinger-deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy via SFTP
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: cm-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install lftp
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp

      - name: Generate version file and add cache busting
        run: |
          VERSION="${{ github.sha }}"
          TIMESTAMP="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

          echo "$VERSION $TIMESTAMP" > version.txt
          echo "üìù Generated version.txt: $(cat version.txt)"

          # Add version comments to CSS and JS files for cache verification
          echo "/* Version: $VERSION - $TIMESTAMP */" | cat - styles.css > temp && mv temp styles.css
          echo "/* Version: $VERSION - $TIMESTAMP */" | cat - script.js > temp && mv temp script.js

          echo "‚úÖ Added version stamps to static assets"

      - name: Deploy to Hostinger
        env:
          HOST: ${{ secrets.HOSTINGER_FTP_SERVER }}
          PORT: ${{ secrets.HOSTINGER_FTP_PORT }}
          USER: ${{ secrets.HOSTINGER_FTP_USERNAME }}
          PASS: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
          REMOTE_DIR: ${{ secrets.HOSTINGER_REMOTE_DIR }}
        run: |
          set +e
          echo "üöÄ Starting deployment..."
          echo "üìã Connection details:"
          echo "   Host: $HOST"
          echo "   Port: $PORT"
          echo "   User: $USER"
          echo "   Remote Dir: $REMOTE_DIR"

          lftp -u "$USER","$PASS" sftp://"$HOST":"$PORT" <<'EOF'
          set net:timeout 30
          set net:max-retries 3
          set net:reconnect-interval-base 5
          set sftp:auto-confirm yes
          set xfer:clobber on

          cd /home/u476428393/public_html
          lcd $GITHUB_WORKSPACE

          mirror -R \
            --parallel=4 \
            --continue \
            --only-newer \
            --verbose \
            --exclude-glob .git* \
            --exclude-glob .github/ \
            --exclude-glob node_modules/ \
            --exclude-glob '*.map' \
            --exclude-glob '*.md' \
            --exclude-glob deploy.sh \
            --exclude-glob .DS_Store \
            --exclude-glob .deploy-trigger \
            --exclude-glob docs/ \
            --exclude-glob backups/ \
            --exclude-glob logs/

          bye
          EOF

          STATUS=$?
          # lftp exit 1 is commonly benign (e.g., trying to remove non-existent file).
          if [ $STATUS -ne 0 ] && [ $STATUS -ne 1 ]; then
            echo "::error::lftp failed with exit code $STATUS"
            exit $STATUS
          fi
          echo "‚úÖ Deployment complete (exit=$STATUS)"

      - name: Verify live site updated
        run: |
          echo "‚è≥ Waiting 15 seconds for file propagation and CDN..."
          sleep 15

          EXPECTED_SHA="${{ github.sha }}"
          MAX_ATTEMPTS=3
          ATTEMPT=1

          echo "üîç Verifying homepage is accessible..."
          if curl -sS -f -o /dev/null "https://chicagosmoney.com/?cb=${{ github.run_id }}"; then
            echo "‚úÖ Homepage is accessible"
          else
            echo "‚ùå Homepage check failed"
            exit 1
          fi

          echo ""
          echo "üîç Checking CSS file for version stamp..."
          curl -sS "https://chicagosmoney.com/styles.css?cb=${{ github.run_id }}" | head -3

          if curl -sS "https://chicagosmoney.com/styles.css?cb=${{ github.run_id }}" | head -1 | grep -q "$EXPECTED_SHA"; then
            echo "‚úÖ CSS contains current version stamp"
          else
            echo "‚ö†Ô∏è  CSS may be cached (old version)"
          fi

          echo ""
          echo "üîç Attempting to verify version.txt (up to $MAX_ATTEMPTS tries)..."

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "üîÑ Attempt $ATTEMPT of $MAX_ATTEMPTS..."

            URL="https://chicagosmoney.com/version.txt?cb=${{ github.run_id }}_${ATTEMPT}"
            HTTP_CODE=$(curl -sS -w "%{http_code}" -o /tmp/live_version.txt "$URL")

            # Check if we got actual version.txt content (not HTML)
            if [ "$HTTP_CODE" = "200" ] && grep -q "^[0-9a-f]\{40\}" /tmp/live_version.txt 2>/dev/null; then
              echo "‚úÖ version.txt accessible and valid"
              echo "üìÑ Content: $(cat /tmp/live_version.txt)"

              if grep -q "$EXPECTED_SHA" /tmp/live_version.txt; then
                echo "‚úÖ Live version matches this build!"
                break
              else
                echo "‚ö†Ô∏è  Version mismatch - may be cached"
                echo "   Expected: $EXPECTED_SHA"
                echo "   Got: $(cat /tmp/live_version.txt)"
              fi
            else
              echo "‚ö†Ô∏è  HTTP $HTTP_CODE - version.txt returned HTML or is inaccessible"
              if [ -f /tmp/live_version.txt ]; then
                echo "üìÑ First 100 chars:"
                head -c 100 /tmp/live_version.txt | tr '\n' ' '
                echo ""
              fi
            fi

            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done

          echo ""
          echo "‚ÑπÔ∏è  If version.txt shows old version, clear CDN cache at Hostinger control panel"
          echo "‚úÖ Deployment verification complete - files uploaded successfully!"
